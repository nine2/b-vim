" ====================================================
"   Copyright (C)2019 All rights reserved.
"
"   Author        : bbxytl
"   Email         : bbxytl@gmail.com
"   File Name     : vimrc.bundles_ycm
"   Last Modified : 2021-02-08 16:24
"   Describe      :
"       ycm 在补全 go 语言时，gocode 可能会出现新写的函数或变量
"   找不到的情况，可以将 ycm 的 go 补全引擎修改为 gopls。
"   （至少当前写此记录时还未支持)
"   修改步骤如下：
"       1. 进入目录：cd YouCompleteMe/third_party/ycmd
"       2. 切成master: git checkout master && git pull
"       3. 如果本地已经拉取了 go 的一些工具，如 x/tools 等，
"       则可以直接将其链接过来，不用再拉一遍：
"           ln -s ~/go/src/golang.org YouCompleteMe/third_party/ycmd/third_party/go/src/golang.org
"         如果本地没有这些，则可以直接使用脚本:
"         https://github.com/bbxytl/b-dotfiles/blob/master/b-go/install-go-tools.sh
"         拉取【此脚本是为了解决 直接从 golang.org 拉取失败】
"       4. 在YouCompleteMe目录下执行 ./install.py --go-completer 启用 go 支持
"           运行好后，ycm即可支持 gopls。
" ====================================================


" ###############################
" 自动补全

" ##### 重量级补全
Bundle 'nine2/YouCompleteMe'
" let g:ycm_key_list_select_completion = ['<Down>', '<Tab>']   " C-j 同时可用
let g:ycm_register_as_syntastic_checker = 1
let g:ycm_key_list_select_completion = ['<Down>']   " C-n 同时可用, Tab 给 ultisnips 使用
let g:ycm_key_list_previous_completion = ['<Up>']   " C-p 同时可用
let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
let g:ycm_filepath_completion_use_working_dir = 1
let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
let g:ycm_always_populate_location_list = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全, 不过python关键字都很短，所以，需要的自己打开
let g:ycm_key_detailed_diagnostics = '<leader>d'    " 查看当前光标下标识符的详细信息
" 下面的preview生效需要设置
" set completeopt=menu,preview
" let g:ycm_add_preview_to_completeopt = 0
" let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_autoclose_preview_window_after_completion = 0
" 跳转到定义处,新Tab打开, 如果已存在当前文件的 tab, 则跳转到对应 tab
"取值范围：[ 'same-buffer', 'horizontal-split', 'vertical-split', 'new-tab', 'new-or-existing-tab' ]
let g:ycm_goto_buffer_command = 'new-or-existing-tab'
let g:ycm_error_symbol = '❥✘' "  错误标记 ✗✘☛☛❦❥❤︎ℳ❣❣➤➤➽
let g:ycm_warning_symbol = '❥➤' " 警告符号
" let g:ycm_key_invoke_completion = '<c-z>'
let g:ycm_min_num_identifier_candidate_chars = 2
" 定位当前函数、变量的定义处
nnoremap ff :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap fi :YcmCompleter GoToImplementation<CR>
nnoremap fr :YcmCompleter GoToReferences<CR>
nnoremap <leader>] :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>[ :YcmCompleter GoToDeclaration<CR>
nnoremap <C-]> :YcmCompleter GoToDefinitionElseDeclaration<CR>
nmap <leader>e :YcmDiags<CR>
let g:ycm_auto_hover=''
" nmap <leader>d <plug>(YCMHover)
nmap <Space> <plug>(YCMHover)

" 获取变量文档信息
  let s:ycm_hover_popup = -1
  function s:Hover()
    let response = youcompleteme#GetCommandResponse( 'GetDoc' )
    if response == ''
      return
    endif

    call popup_hide( s:ycm_hover_popup )
    let s:ycm_hover_popup = popup_atcursor( balloon_split( response ), {} )
  endfunction

  " CursorHold triggers in normal mode after a delay
  " autocmd CursorHold * call s:Hover()
  " Or, if you prefer, a mapping:
  " nnoremap <silent> <leader>D :call <SID>Hover()<CR>

" 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
" old version
"" if !empty(glob("$VIM_TMP_PATH/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"))
""     let g:ycm_global_ycm_extra_conf = expand("$VIM_TMP_PATH/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py")
"" endif
" " new version
"" if !empty(glob("$VIM_TMP_PATH/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
""     let g:ycm_global_ycm_extra_conf = expand("$VIM_TMP_PATH/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py")
"" endif
"" if !empty(glob("$VIM_TMP_PATH/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py"))
""     let g:ycm_global_ycm_extra_conf = expand("$VIM_TMP_PATH/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py")
"" endif
" 不用每次确认加载的 .ycm_extra_conf.py 文件
let g:ycm_confirm_extra_conf = 0
" 使用 YCM 时 关闭 syntastic 的 java checker, 防止冲突
let g:syntastic_java_checkers = []

" let g:ycm_log_level = 'info'
let g:ycm_filetype_blacklist = {
    \ 'tagbar' : 1,
    \ 'qf' : 1,
    \ 'notes' : 1,
    \ 'unite' : 1,
    \ 'vimwiki' : 1,
    \ 'pandoc' : 1,
    \ 'infolog' : 1,
    \ 'mail' : 1,
    \}

let g:ycm_filetype_whitelist = {
    \ "c":1,
    \ "cpp":1,
    \ "h":1,
    \ "objc":1,
    \ "sh":1,
    \ "zsh":1,
    \ "vim":1,
    \ "go":1,
    \ "python":1,
    \ "java":1,
    \ }

let g:ycm_semantic_triggers =  {
    \ 'c,cpp,sh,zsh,python,java,go,erlang,perl,snippets': ['re!\w{2}'],
    \ 'cs,lua,vim,javascript': ['re!\w{2}'],
    \ }


Bundle 'tdcdev/ycm_simple_conf'

