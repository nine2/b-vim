" ==========================================
"  bundle 插件管理和配置项
" -----------------#github
"   插件来自 github，只需要 ： 作者名/项目名
"  Bundle 'tomasr/molokai'
"   插件来自 vim-scripts，直接写插件名就行了
"  Bundle 'L9'
"   如使用自己的git库的插件，像下面这样做
"  Bundle 'git://git.wincent.com/command-t.git'
" ---------------#git库在本地机器的情况
"   如使用自己的git库在本地机器，像下面这样做
"  Bundle 'file:///Users/gmarik/path/to/plugin'
"
" ==========================================
set nocompatible               " be iMproved
filetype off " required! turn off
set rtp+=$VIM_TMP_PATH/bundle/vundle/
call vundle#rc("$VIM_TMP_PATH/bundle")

" ################### Bundles 配置 #########################
" 使用Vundle来管理插件
" vim plugin bundle control, command model
"     :BundleInstall     install 安装配置的插件
"     :BundleInstall!    update  更新
"     :BundleClean       remove plugin not in list 删除本地无用插件

" ##### 插件管理工具
Bundle 'gmarik/vundle'


" ###############################
" 主题 molokai
Bundle 'nine2/molokai'
let g:molokai_original = 1
set t_Co=256
colorscheme molokai

" ###############################
" 主题. 状态栏
" Bundle 'Lokaltog/vim-powerline'
Bundle 'vim-airline/vim-airline'
" set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
" Bundle 'gcmt/taboo.vim'
" let g:taboo_tab_format = " %N.[%f %m] "
" let g:taboo_modified_tab_flag = "+"
Bundle 'vim-airline/vim-airline-themes'
let g:airline_theme='molokai'
" let g:airline_theme='powerlineish'
" let g:airline_theme='monochrome'
let g:airline_exclude_preview = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_tab_type = 1
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#tabline#switch_buffers_and_tabs = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
" let g:airline_statusline_ontop=1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" unicode symbols
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '␊'
" let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.maxlinenr = '│'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.spell = 'Ꞩ'
" let g:airline_symbols.notexists = '∄'
let g:airline_symbols.notexists = ' '
let g:airline_symbols.whitespace = 'Ξ'
" let g:airline_left_sep = '▶'
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
" let g:airline_right_sep = '◀'
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
" let g:airline_symbols.branch = '⎇'
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_powerline_fonts = 1
" 修改文件： ~/.vim/bundle/vim-airline/autoload/airline.vim 中的下面的函数
"     可以在状态栏显示时间
" function! airline#statusline(winnr)
"   if has_key(s:contexts, a:winnr)
"    " return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line
"     return '%{airline#check_mode('.a:winnr.')}'.s:contexts[a:winnr].line.'|'.strftime("%d %H:%M")
"   endif
"  " in rare circumstances this happens...see #276
"   return ''
" endfunction

" 状态栏布局
"let g:airline#extensions#default#layout = [
"      \ [ 'a', 'b', 'c' ],
"      \ [ 'x', 'y', 'z', 'warning', 'error' ]
"      \ ]
" %B:ANSII码，%l:行号, %c:列号, %P:当前文件的百分比行, filetype:文件类型
" let g:airline_section_x = airline#section#create_right([' %B│ %lL:%cC│ %p%%│ ', 'filetype'])
let g:airline_section_z = airline#section#create_right(['%lL:%cC│ %p%%/%LL'])

" let g:airline#extensions#taboo#enabled = 0
" let g:airline#extensions#bufferline#enabled = 1
" let g:airline#extensions#csv#enabled = 1
let g:airline#extensions#fugitiveline#enabled = 1
let g:airline#extensions#hunks#enabled = 1
let g:airline#extensions#coc#enabled = 1
" let g:airline#extensions#tmuxline#enabled = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#wordcount#enabled = 1
let b:airline_whitespace_checks = [ 'indent', 'trailing' ]
" let b:airline_whitespace_checks = [ 'trailing' ]
let g:airline#extensions#ycm#enabled = 1
" Always show the status line - use 2 lines for the status bar
set laststatus=2


" ###### 中文 vim 帮助
Bundle 'asins/vimcdoc'


" ##### 自动根据当前打开文件切换工作目录
Bundle 'nine2/vim-rooter'
let g:rooter_silent_chdir = 1
let g:rooter_resolve_links = 1
nmap <leader>cd :AutoChangeDirectory <cr>


" ###############################
" 代码格式管理
" ##### 缩进标识, 这块通过设置 list 在文件 vimrc.config_base 里有些函数实现
Bundle 'nine2/vim-indent-guides'
map <leader>i :Nine2IndentGuides<cr>

" ##### 快速去行尾空格
Bundle 'bronson/vim-trailing-whitespace'
" 下列文件类型中的行尾空格tab不高亮显示
let g:extra_whitespace_ignored_filetypes = ['unite', 'mkd', 'diff', 'ctrlsf', 'git', 'qf']
map <leader>, :FixWhitespace<cr>


" ###### 快速注释
Bundle 'scrooloose/nerdcommenter'
" <leader>cc 注释选中内容
" <leader>cu 取消选中注释
" <leader>c$ 从当前光标开始到行尾注释掉
let g:NERDCustomDelimiters = {
    \ 'c': { 'leftAlt': '/*','rightAlt': '*/', 'left': '//', 'right': '' },
    \ 'plantuml': { 'leftAlt': "/'",'rightAlt': "'/", 'left': "'", 'right': '' },
    \ }
let NERD_cpp_alt_style=1
let NERD_c_alt_style=1
let g:NERDSpaceDelims=1


" ###############################
" 语法高亮
" 针对项目设置的自定义语法，参考 README
Bundle 'nine2/vim-custom-syntax'
" 可使用此配置关闭语法高亮
" let g:custom_syntax_hightlight_enable= 0
" 语法高亮
" let g:custom_syntax_hightlight_macro= 1
" ###### 多语言语法检查
"Bundle 'scrooloose/syntastic'
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"" to see error location list
"let g:syntastic_always_populate_loc_list = 1
"" 当第一行是报错时，自动跳转过去，否则，不自动跳转
"" let g:syntastic_auto_jump = 2
"" 默认为 2, 表示发现错误时不自动打开,当修正以后没有再发现错误时自动关闭
"" 1表示自动打开自动关闭
"" 0表示关闭自动打开和自动关闭
"" 3表示自动打开,但不自动关闭
"let g:syntastic_auto_loc_list = 2
"let g:syntastic_loc_list_height = 5
"let g:syntastic_check_on_open=1
"let g:syntastic_check_on_wq=1
"let g:syntastic_error_symbol='✘✘'
"let g:syntastic_warning_symbol='➤➤'
"let g:syntastic_enable_highlighting=1
"" 使用pyflakes,速度比pylint快
"let g:syntastic_python_checkers=['pep8', 'pyflakes']
"let g:syntastic_python_pep8_args='--ignore=E501,E225'
"" 修改高亮的背景色, 适应主题
"highlight SyntasticErrorSign guifg=white guibg=black
"nnoremap ew :SyntasticCheck<cr>:Errors<cr>
"" nnoremap ee :SyntasticCheck<cr>
"nmap <silent> ee :lr 1<cr>
"nmap <silent> e1 :lr 1<cr>
"nmap <silent> e2 :lr 2<cr>
"nmap <silent> e3 :lr 3<cr>
"nmap <silent> e4 :lr 4<cr>
"nmap <silent> e5 :lr 5<cr>
"nmap <silent> e6 :lr 6<cr>
"nmap <silent> e7 :lr 7<cr>
"nmap <silent> e8 :lr 8<cr>
"nmap <silent> e9 :lr 9<cr>
"nmap <silent> e0 :lla<cr>
"" autocmd FileType go let g:syntastic_auto_loc_list = 0
"" autocmd VimEnter go SyntasticCheck
""syntastic 保存检查代码时候传入参数, 可以解决 java 文件第三方包有 语法报警问题
"let g:syntastic_java_javac_args="-cp ../../lib:../../bin -sourcepath ../../bin -Djava.ext.dirs=../../lib -d ../../bin"

Bundle 'w0rp/ale'
" let g:ale_enabled= 0
let g:ale_sign_error = '✘✘'
let g:ale_sign_warning = '➤➤'
highlight clear ALEErrorSign
highlight clear ALEWarningSign
" 使用 quickfix 替换 location 窗口
" let g:ale_set_quickfix = 1
" let g:ale_set_location = 1
let g:ale_list_window_size = 5
" let g:ale_fix_on_save = 0
let g:ale_go_staticcheck_lint_package = 1
" let g:ale_go_gometalinter_lint_package = 0
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" go 文件配置
let g:ale_go_golangci_lint_executable  = "golangci-lint"
let g:ale_go_golangci_lint_package = 1
" 需要安装 gopls 工具
" let g:ale_linters = {'go': ['go vet', 'gofmt', 'golint']}
" let g:ale_linters = {'go': ['gopls']}
" let g:ale_linters = {'go': ['gopls'], 'python':['pep8', 'pyflakes']}
" 需要安装 golangci-lint ，速度快，比 gopls 占用内存少,
" 静态检查足够了（检查的非常细）
" let g:ale_linters = {'go': ['golangci-lint'], 'python':['pep8', 'pyflakes']}
autocmd FileType python,py let g:ale_linters = {'python':['pep8', 'pyflakes']}
autocmd FileType go let g:ale_linters = {'go': ['golangci-lint']}

let g:airline#extensions#ale#enabled = 1
let g:ale_lint_on_text_changed = 1
let g:ale_lint_on_insert_leave = 1
nmap <silent> ek <Plug>(ale_previous_wrap)
nmap <silent> ej <Plug>(ale_next_wrap)
nmap <silent> eh <Plug>(ale_first)
nmap <silent> el <Plug>(ale_last)

" 给 typedef 和 enum 配色
" 需要使用到 ctags
Bundle 'vim-scripts/TagHighlight'

" ###############################
" 自动补全

" ###### 自动补全单引号，双引号等
Bundle 'Raimondi/delimitMate'
" for python docstring ,优化输入
au FileType python let b:delimitMate_nesting_quotes = ['"']
au FileType markdown let b:delimitMate_nesting_quotes = ['`']

"Displays function signatures from completions in the command line.
"When you accept a completion for a function with <c-y>, echodoc will display
"the function signature in the command line and highlight the argument
"position your cursor
Bundle 'Shougo/echodoc.vim'
" set cmdheight=3
let g:echodoc_enable_at_startup = 1


" ###############################
" Vim 快捷操作
" ##### 更高效的移动 [,, + w/fx]
Bundle 'Lokaltog/vim-easymotion'
let g:EasyMotion_smartcase = 1
"let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
map fh <Plug>(easymotion-linebackward)
map fw <Plug>(easymotion-w)
map fj <Plug>(easymotion-e)
map fk <Plug>(easymotion-b)
map fl <Plug>(easymotion-lineforward)
" map fb <Plug>(easymotion-b)
" map fe <Plug>(easymotion-e)
" 重复上一次操作, 类似repeat插件, 很强大
map <Leader><leader>. <Plug>(easymotion-repeat)


" ##### 快速的匹配 https://github.com/vim-scripts/matchit.zip
" Bundle 'vim-scripts/matchit.zip'


" ##### 显示marks - 方便自己进行标记和跳转
" mm 按顺序自动标示
" m/ 显示所有的标记
" lj, mn 跳转到下一项
" lk, mp 跳转到上一项
" md 删除当前行标示
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
Bundle 'kshenoy/vim-signature'
" 书签设定。mx，设定/取消当前行名为 x 的标签；m,，自动设定下一个可用书签名，
"   前面提说，独立书签名是不能重复的，在你已经有了多个独立书签，
"   当想再设置书签时，需要记住已经设定的所有书签名，否则很可能会将已有的书签冲掉，这可不好，
"   所以，vim-signature 为你提供了 m, 快捷键，
"   自动帮你选定下一个可用独立书签名；mda，删除当前文件中所有独立书签。
" 书签罗列。ms，罗列出当前文件中所有书签，选中后回车可直接跳转；
" 书签跳转。mn，按行号前后顺序，跳转至下个独立书签；
"   mp，按行号前后顺序，跳转至前个独立书签。
"   书签跳转方式很多，除了这里说的行号前后顺序，
"   还可以基于书签名字母顺序跳转、分类书签同类跳转、分类书签不同类间跳转等等。
let g:SignatureMap = {
        \ 'Leader'             :  "m",
        \ 'PlaceNextMark'      :  "m,",
        \ 'ToggleMarkAtLine'   :  "mm",
        \ 'PurgeMarksAtLine'   :  "m-",
        \ 'DeleteMark'         :  "dm",
        \ 'PurgeMarks'         :  "m<Space>",
        \ 'PurgeMarkers'       :  "m<BS>",
        \ 'GotoNextLineAlpha'  :  "']",
        \ 'GotoPrevLineAlpha'  :  "'[",
        \ 'GotoNextSpotAlpha'  :  "`]",
        \ 'GotoPrevSpotAlpha'  :  "`[",
        \ 'GotoNextLineByPos'  :  "]'",
        \ 'GotoPrevLineByPos'  :  "['",
        \ 'GotoNextSpotByPos'  :  "mn",
        \ 'GotoPrevSpotByPos'  :  "mp",
        \ 'GotoNextMarker'     :  "[+",
        \ 'GotoPrevMarker'     :  "[-",
        \ 'GotoNextMarkerAny'  :  "]=",
        \ 'GotoPrevMarkerAny'  :  "[=",
        \ 'ListLocalMarks'     :  "m/",
        \ 'ListLocalMarkers'   :  "m?"
        \ }


" ##### 选中区块
Bundle 'terryma/vim-expand-region'
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)


" ##### 多光标选中编辑
Bundle 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" ##### 文件搜索 change to https://github.com/ctrlpvim/ctrlp.vim
Bundle 'ctrlpvim/ctrlp.vim'
let g:ctrlp_map = '<leader>f'
let g:ctrlp_cmd = 'CtrlP'
" map <leader>f :CtrlP<CR>
map <leader>b :CtrlPBuffer<CR>
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*        " Linux/MacOSX
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc|a)$|tags',
    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
let g:ctrlp_mruf_default_order = 1
" " 如果安装了ag, 使用ag
"  if executable('ag')
"   " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
"    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
"   " ag is fast enough that CtrlP doesn't need to cache
"    let g:ctrlp_use_caching = 0
"  endif

" ##### 类似sublimetext的搜索
Bundle 'dyng/ctrlsf.vim'
""""""
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
let g:ctrlsf_position = 'right'
" let g:ctrlsf_winsize = '30%'
let g:ctrlsf_auto_close = 0
let g:ctrlsf_confirm_save = 0
let g:ctrlsf_indent = 2
let g:ctrlsf_regex_pattern = 1
let g:ctrlsf_selected_line_hl = 'op'
" let g:ctrlsf_ignore_dir = ['bower_components', 'npm_modules']
" ignore file
" https://github.com/ggreer/the_silver_searcher/wiki/Advanced-Usage
" By default, Ag will read the patterns in .gitignore and .hgignore files in directories it searches.
" You can also create .ignore files to ignore things that are in your source repository. .ignore uses the same patterns as .gitignore and .hgignore.
"
" Note: cannot use <CR> or <C-m> for open
" Use : <sapce> or <tab>
let g:ctrlsf_mapping = {
    \ "open"  : "<Space>",
    \ "openb" : "O",
    \ "tab"   : "t",
    \ "tabb"  : "T",
    \ "prevw" : "p",
    \ "quit"  : "q",
    \ "next"  : "<C-J>",
    \ "prev"  : "<C-K>",
    \ "pquit" : "q",
    \ }

let g:ctrlsf_extra_backend_args = {
    \ 'pt': '--home-ptignore',
    \ 'ag': '--path-to-ignore ~/.ag_ignore'
    \ }

" 切换显示模式
let g:ctrlsf_default_view_mode = 'compact'
map <leader>\ :call CtrlsfViewMode()<cr>
fun! CtrlsfViewMode()
    if g:ctrlsf_default_view_mode == 'normal'
        let g:ctrlsf_default_view_mode = 'compact'
    else
        let g:ctrlsf_default_view_mode = 'normal'
    endif
endfun

nnoremap <leader>sp :CtrlSF<CR>
nmap \ <Plug>CtrlSFCwordPath<CR>
nmap <F7> :CtrlSF -R '\W<c-r>=expand("<cword>")<cr>[(,)]'<cr>
nmap <leader>aa :CtrlSF -R '\W<c-r>=expand("<cword>")<cr>'<cr>
nmap <leader>a :CtrlSF -W '

" Asynchronously fly grep in vim
" Bundle 'wsdjeg/FlyGrep.vim'
" nnoremap <leader>\ :FlyGrep<CR>


" 强大的模糊搜索, CtrlP 比它更强大
" 默认：
" <leader>f 查找文件
" <leader>b 查找buffer
"Bundle 'Yggdroot/LeaderF'
"let g:Lf_WildIgnore = {
"    \ 'dir': ['.svn','.git','.hg','vendor'],
"    \ 'file': ['*.sw?','~$*','*.bak','*.exe','*.o','*.so','*.py[co]']
"    \}
"let g:Lf_PreviewCode = 1
"let g:Lf_PreviewInPopup = 1


" 查看所有 tab 页内容
" 默认快捷键
" <leader>mf
Bundle 'kien/tabman.vim'
" 查看所有buffer
" 默认快捷键
" <leader>be
" <leader>bs
Bundle 'jlanzarotta/bufexplorer'
let g:bufExplorerShowNoName=1


" ##### 括号显示增强
Bundle 'kien/rainbow_parentheses.vim'
" 不加入这行, 防止黑色括号出现, 很难识别
" \ ['black',       'SeaGreen3'],
let g:rbpt_colorpairs = [
\ ['brown',       'RoyalBlue3'],
\ ['Darkblue',    'SeaGreen3'],
\ ['darkgray',    'DarkOrchid3'],
\ ['darkgreen',   'firebrick3'],
\ ['darkcyan',    'RoyalBlue3'],
\ ['darkred',     'SeaGreen3'],
\ ['darkmagenta', 'DarkOrchid3'],
\ ['brown',       'firebrick3'],
\ ['gray',        'RoyalBlue3'],
\ ['darkmagenta', 'DarkOrchid3'],
\ ['Darkblue',    'firebrick3'],
\ ['darkgreen',   'RoyalBlue3'],
\ ['darkcyan',    'SeaGreen3'],
\ ['darkred',     'DarkOrchid3'],
\ ['red',         'firebrick3'],
\ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces


" ##### 目录导航
Bundle 'scrooloose/nerdtree'
" map <leader>n :NERDTreeToggle<CR>
noremap <silent> <Leader>n :NERDTreeFind<cr>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" Open the existing NERDTree on each new tab.
autocmd BufWinEnter * silent NERDTreeMirror
" Start NERDTree. If a file is specified, move the cursor to its window.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * NERDTreeFind | if argc() > 0 || exists("s:std_in") | wincmd p | endif
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'
let g:NERDTreeMouseMode = 2 " 单击开目录，双击开文件
let g:NERDTreeWinSize = 30
let g:NERDTreeDirArrows=1
let g:NERDTreeChDirMode=2
let g:NERDTreeShowLineNumbers=0
"打开NERDTree,定位到当前文件
noremap <silent> <Leader>nf :NERDTreeFind<cr>
" autocmd vimenter *.go NERDTreeFind
" 选中目录，按 ma 可以在目录中新建文件


" ##### 目录导航
Bundle 'jistr/vim-nerdtree-tabs'
""""""
map <Leader>n <plug>NERDTreeTabsToggle<CR>
" 关闭同步
let g:nerdtree_tabs_synchronize_view=1
let g:nerdtree_tabs_synchronize_focus=1
" 自动开启nerdtree
let g:nerdtree_tabs_open_on_console_startup = 0
let g:nerdtree_tabs_focus_on_files = 1

" ##### NerdTree文件类型高亮
" Bundle 'tiagofumo/vim-nerdtree-syntax-highlight'
" 1) Highlights open files in a different color. 2) Closes a buffer directly from NERDTree.
" Bundle 'PhilRunninger/nerdtree-buffer-ops'

" 标签导航
Bundle 'majutsushi/tagbar'
" nmap <F9> :TagbarToggle<CR>
nmap <leader>m :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_sort = 0
let g:tagbar_show_linenumbers = 0
" let g:tagbar_singleclick = 1
let g:tagbar_left = 0
let g:tagbar_map_zoomwin = "A"
let g:tagbar_map_togglefold = "x"
let g:tagbar_map_hidenonpublic = "t"
let g:tagbar_map_showproto = "f"
let g:tagbar_expand = 0
let g:tagbar_autoshowtag = 1
let g:tagbar_silent = 1
let g:tagbar_map_jump = ["<CR>", "o"]
set updatetime=500
" 保持鼠标可用，部分终端可能还是会失效，参照：
" http://landcareweb.com/questions/6495/zai-vimzhong-wei-shi-yao-wo-de-shu-biao-bu-neng-chao-guo-di-220lie
" if has("mouse_sgr")
    " set ttymouse=sgr
" end
" cpp类型
let g:tagbar_type_cpp = {
    \ 'kinds' : [
        \ 'd:macros:1',
        \ 'g:enums',
        \ 't:typedefs:0:0',
        \ 'e:enumerators:0:0',
        \ 'n:namespaces',
        \ 'c:classes',
        \ 's:structs',
        \ 'u:unions',
        \ 'f:functions',
        \ 'm:members:0:0',
        \ 'v:global:0:0',
        \ 'x:external:0:0',
        \ 'l:local:0:0'
    \ ],
    \ 'sro'        : '::',
    \ 'kind2scope' : {
        \ 'g' : 'enum',
        \ 'n' : 'namespace',
        \ 'c' : 'class',
        \ 's' : 'struct',
        \ 'u' : 'union'
    \ },
    \ 'scope2kind' : {
        \ 'enum'      : 'g',
        \ 'namespace' : 'n',
        \ 'class'     : 'c',
        \ 'struct'    : 's',
        \ 'union'     : 'u'
    \ }
\ }
" markdown
"let g:tagbar_type_markdown = {
"    \ 'ctagstype' : 'markdown',
"    \ 'kinds' : [
"        \ 'h:Heading_L1',
"        \ 'i:Heading_L2',
"        \ 'k:Heading_L3'
"    \ ]
"\ }
" Makefile (targets)
let g:tagbar_type_make = {
            \ 'kinds':[
                \ 'm:macros',
                \ 't:targets'
            \ ]
\}
" obj-c
let g:tagbar_type_objc = {
    \ 'ctagstype' : 'ObjectiveC',
    \ 'kinds'     : [
        \ 'i:interface',
        \ 'I:implementation',
        \ 'p:Protocol',
        \ 'm:Object_method',
        \ 'c:Class_method',
        \ 'v:Global_variable',
        \ 'F:Object field',
        \ 'f:function',
        \ 'p:property',
        \ 't:type_alias',
        \ 's:type_structure',
        \ 'e:enumeration',
        \ 'M:preprocessor_macro',
    \ ],
    \ 'sro'        : ' ',
    \ 'kind2scope' : {
        \ 'i' : 'interface',
        \ 'I' : 'implementation',
        \ 'p' : 'Protocol',
        \ 's' : 'type_structure',
        \ 'e' : 'enumeration'
    \ },
    \ 'scope2kind' : {
        \ 'interface'      : 'i',
        \ 'implementation' : 'I',
        \ 'Protocol'       : 'p',
        \ 'type_structure' : 's',
        \ 'enumeration'    : 'e'
    \ }
\ }
" R
let g:tagbar_type_r = {
    \ 'ctagstype' : 'r',
    \ 'kinds'     : [
        \ 'f:Functions',
        \ 'g:GlobalVariables',
        \ 'v:FunctionVariables',
    \ ]
\ }
" for ruby
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }


" Bundle 'rking/ag.vim'
" let g:ag_prg="ag --vimgrep --smart-case  --column --nogroup --noheading"
" let g:ag_working_path_mode="r"
" let g:ag_highlight=1
" nmap <F7> :Ag -w <c-r>=expand("<cword>")<cr><cr>
" 查找函数调用
" nmap <F7> :Ag -w <c-r>=expand("<cword>")<cr> \| grep '<c-r>=expand("<cword>")<cr>[(,)]'<cr>
" 查询当前单词, 立刻查询
" nmap <leader>aa :Ag -w <c-r>=expand("<cword>")<cr><cr>
" Ag 默认查找当前单词，可修改, 不立刻查询
" nmap <leader>a :Ag <c-r>=expand("<cword>")<cr>
" nmap <leader>a :Ag '


" Vim Workspace Controller
Bundle 'szw/vim-ctrlspace'
nmap b<space> :CtrlSpace<cr>
set hidden
""""""
hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8

Bundle 'Valloric/ListToggle'
let g:lt_location_list_toggle_map = '<leader>lt'
let g:lt_quickfix_list_toggle_map = '<leader>qt'
" ##### 快速赋值语句对齐
Bundle 'junegunn/vim-easy-align'
vmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['='] = { 'pattern': '=', 'ignore_groups': ['String'] }


" ##### quickrun
Bundle 'thinca/vim-quickrun'
""""""
let g:quickrun_config = {
\   "_" : {
\       "outputter" : "message",
\   },
\}
let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r <Plug>(quickrun)
map <F10> :QuickRun<CR>


" 文件头增加 copyright
Bundle "nine2/vim-copyright"
" let g:file_copyright_company = 'Company'
" let g:file_copyright_rights= 'My Rights'
let g:file_copyright_auto_update = 1
let g:file_copyright_name = 'bbxytl'
let g:file_copyright_email = 'bbxytl@gmail.com'
" let g:file_copyright_auto_filetypes = ['sh', 'plx', 'pl', 'pm', 'py', 'python', 'h', 'hpp', 'c', 'cpp', 'java']

let g:file_copyright_comment_mid_prefix_map = {
      \"python": "\#", "py":"\#",
      \"cpp":"\+", "c":"\#", "h":"\+", "hpp":"\#",
      \"go":"\^",
      \"vim":"\"",
      \"sh":"\#", "shell":"\#",
      \"ruby":"\#", "rb":"\#", "rake":"\#",
      \"uml":"'", "plantuml":"'",
\}

map uh :CopyrightUpdate<cr>




" ####################################
" 加载 不同文件 配置
let g:bundle_filetype= expand("$VIM_CONFIG_PATH/vimrc.bundles_filetype")
if filereadable(expand(g:bundle_filetype))
    exec "so  ".g:bundle_filetype
endif

" 加载 不同 配置, 简单补全版 和复杂补全版（YCM)
let g:cur_bundle_file_path = expand("$VIM_TMP_PATH/vimrc.bundles")
if filereadable(expand(g:cur_bundle_file_path))
    exec "so  ".g:cur_bundle_file_path
else
    let g:cur_bundle_file_path = expand("$VIM_CONFIG_PATH/vimrc.bundles_simple")
    " 默认加载简单版
    if filereadable(expand(g:cur_bundle_file_path))
        exec "so  ".g:cur_bundle_file_path
    endif
endif

" 补全参数
Bundle 'bbxytl/CompleteParameter.vim'
inoremap <silent><expr> ( complete_parameter#pre_complete("()")
smap <c-j> <Plug>(complete_parameter#goto_next_parameter)
imap <c-j> <Plug>(complete_parameter#goto_next_parameter)
smap <c-k> <Plug>(complete_parameter#goto_previous_parameter)
imap <c-k> <Plug>(complete_parameter#goto_previous_parameter)


" 自动保存
" Bundle 'vim-scripts/vim-auto-save'
" let g:auto_save = 0
" let g:auto_save_in_insert_mode = 0
" let g:auto_save_silent = 1

" A vim plugin that simplifies the transition between multiline and
" single-line code
Bundle 'AndrewRadev/splitjoin.vim'
nmap sj :SplitjoinSplit<cr>
nmap sk :SplitjoinJoin<cr>

" color hex codes and color names
Bundle 'chrisbra/Colorizer'
" :Colorizer
" :RGB2Term
" :Term2RGB
let g:colorizer_auto_color = 1

set encoding=UTF-8

Bundle 'psliwka/vim-smoothie'
Bundle 'bfrg/vim-qf-preview'
augroup qfpreview
  autocmd!
  autocmd FileType qf nmap <buffer> p <plug>(qf-preview-open)
augroup END
let g:qfpreview = #{
            \ scrolldown: 'j',
            \ scrollup: 'k',
            \ halfpagedown: 'd',
            \ halfpageup: 'u',
            \ fullpagedown: 'f',
            \ fullpageup: 'b',
            \ close: 'q',
            \ height: 20
            \ }

" Bundle 'terryma/vim-smooth-scroll'
" noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
" noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
" noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
" noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>


" ################## 插件配置结束 ###########################
filetype plugin indent on     " required!
